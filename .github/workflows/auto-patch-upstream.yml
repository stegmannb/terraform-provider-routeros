name: Auto-Patch Upstream Provider

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      force_all_tags:
        description: 'Force update all tags (ignore if already up-to-date)'
        type: boolean
        default: false
        required: false

permissions:
  contents: write
  issues: write

jobs:
  auto-patch:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/terraform-routeros/terraform-provider-routeros.git || true
          git fetch upstream

      - name: Check for new upstream commits
        id: check-upstream
        run: |
          UPSTREAM_COMMIT=$(git rev-parse upstream/main)
          CURRENT_COMMIT=$(git rev-parse HEAD)

          echo "upstream_commit=$UPSTREAM_COMMIT" >> $GITHUB_OUTPUT
          echo "current_commit=$CURRENT_COMMIT" >> $GITHUB_OUTPUT

          if git merge-base --is-ancestor $UPSTREAM_COMMIT HEAD; then
            echo "up_to_date=true" >> $GITHUB_OUTPUT
            echo "Already up to date with upstream"
          else
            echo "up_to_date=false" >> $GITHUB_OUTPUT
            echo "New upstream commits available"

            BEHIND_COUNT=$(git rev-list --count HEAD..upstream/main)
            echo "behind_count=$BEHIND_COUNT" >> $GITHUB_OUTPUT
            echo "Behind by $BEHIND_COUNT commits"
          fi

      - name: Merge upstream changes
        if: steps.check-upstream.outputs.up_to_date == 'false'
        id: merge
        run: |
          echo "Merging upstream/main..."

          if git merge upstream/main --no-edit; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "Merge successful"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "Merge conflicts detected"
            git merge --abort
            exit 1
          fi

      - name: Clean up .github directory
        if: steps.check-upstream.outputs.up_to_date == 'false' && steps.merge.outputs.success == 'true'
        run: |
          echo "Cleaning up .github directory..."

          # Keep only our workflow and patches
          KEEP_FILES=(
            ".github/workflows/auto-patch-upstream.yml"
            ".github/patches/0001-fix-rename-fields-starting-with-numbers-for-Go-compa.patch"
          )

          find .github -type f | while read file; do
            SHOULD_KEEP=false
            for keep in "${KEEP_FILES[@]}"; do
              if [ "$file" = "$keep" ]; then
                SHOULD_KEEP=true
                break
              fi
            done

            if [ "$SHOULD_KEEP" = false ]; then
              echo "Removing: $file"
              git rm -f "$file" || rm -f "$file"
            fi
          done

          # Remove empty directories
          find .github -type d -empty -delete

          echo "Cleanup complete"

      - name: Patch README with fork notice
        if: steps.check-upstream.outputs.up_to_date == 'false' && steps.merge.outputs.success == 'true'
        run: |
          echo "Adding fork notice to README..."

          # Check if README already has the callout
          if grep -q "Pulumi-Compatible Fork" README.md 2>/dev/null; then
            echo "README already has fork notice, skipping..."
          else
            echo "Adding fork notice to README..."

            # Create temporary file with callout (using printf to avoid YAML parsing issues)
            printf '%s\n' \
              '> [!NOTE]' \
              '> **Pulumi-Compatible Fork**' \
              '>' \
              '> This is an auto-patched version of the [terraform-routeros/terraform-provider-routeros](https://github.com/terraform-routeros/terraform-provider-routeros) provider.' \
              '> It has been modified to ensure compatibility with Pulumi by renaming fields that start with numbers (which are invalid in Go identifiers).' \
              '>' \
              '> - **All credit goes to the upstream maintainers**' \
              '> - **For issues, please report to the [upstream repository](https://github.com/terraform-routeros/terraform-provider-routeros/issues)**' \
              '> - This fork is automatically synchronized with upstream daily' \
              '' \
              > /tmp/readme_callout.txt

            # Create new README with callout at the top (after title and badges)
            {
              head -n 3 README.md
              echo ""
              cat /tmp/readme_callout.txt
              tail -n +4 README.md
            } > README.md.new

            mv README.md.new README.md
            rm -f /tmp/readme_callout.txt

            echo "README patched successfully"
          fi

      - name: Apply patches
        if: steps.check-upstream.outputs.up_to_date == 'false' && steps.merge.outputs.success == 'true'
        id: apply-patches
        run: |
          echo "Applying patches..."

          PATCH_DIR=".github/patches"
          if [ ! -d "$PATCH_DIR" ]; then
            echo "Patch directory not found: $PATCH_DIR"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          PATCH_COUNT=$(ls -1 $PATCH_DIR/*.patch 2>/dev/null | wc -l)
          if [ "$PATCH_COUNT" -eq 0 ]; then
            echo "No patches found in $PATCH_DIR"
            echo "success=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found $PATCH_COUNT patch(es) to apply"

          FAILED_PATCHES=""
          for patch in $PATCH_DIR/*.patch; do
            echo "Applying: $(basename $patch)"
            if git apply --check "$patch" 2>&1; then
              git apply "$patch"
              echo "  Applied successfully"
            else
              echo "  Failed to apply"
              FAILED_PATCHES="$FAILED_PATCHES\n- $(basename $patch)"
            fi
          done

          if [ -n "$FAILED_PATCHES" ]; then
            echo "failed_patches<<EOF" >> $GITHUB_OUTPUT
            echo -e "$FAILED_PATCHES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "success=true" >> $GITHUB_OUTPUT
            echo "All patches applied successfully"
          fi

      - name: Setup Go
        if: steps.check-upstream.outputs.up_to_date == 'false' && steps.apply-patches.outputs.success == 'true'
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Cache Go dependencies
        if: steps.check-upstream.outputs.up_to_date == 'false' && steps.apply-patches.outputs.success == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Test build
        if: steps.check-upstream.outputs.up_to_date == 'false' && steps.apply-patches.outputs.success == 'true'
        id: build
        run: |
          echo "Building provider..."

          if go build -o terraform-provider-routeros .; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "Build successful"

            VERSION=$(./terraform-provider-routeros version 2>/dev/null || echo "unknown")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "Build failed"
            exit 1
          fi

      - name: Commit and push changes
        if: steps.check-upstream.outputs.up_to_date == 'false' && steps.build.outputs.success == 'true'
        run: |
          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          echo "Committing changes..."
          git add -A

          cat > /tmp/commit-msg.txt <<EOF
          chore: sync with upstream and apply patches

          Upstream commit: ${{ steps.check-upstream.outputs.upstream_commit }}
          Behind by: ${{ steps.check-upstream.outputs.behind_count }} commits
          Build: Success
          Provider version: ${{ steps.build.outputs.version }}

          Auto-generated by GitHub Actions
          EOF

          git commit -F /tmp/commit-msg.txt

          echo "Pushing to fork..."
          git push origin main

          echo "Changes pushed successfully"

      - name: Create issue on merge failure
        if: failure() && steps.merge.outputs.success == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'Auto-Patch: Merge Conflict with Upstream';
            const body = `## Merge Conflict Detected

            The automatic upstream merge has failed due to conflicts.

            **Details:**
            - Upstream commit: \`${{ steps.check-upstream.outputs.upstream_commit }}\`
            - Behind by: ${{ steps.check-upstream.outputs.behind_count }} commits
            - Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            **Action Required:**
            1. Manually merge upstream changes
            2. Resolve conflicts
            3. Re-apply patches from \`.github/patches/\`
            4. Test build
            5. Push changes

            **Commands:**
            \`\`\`bash
            git fetch upstream
            git merge upstream/main
            # Resolve conflicts
            git apply .github/patches/*.patch
            go build -o terraform-provider-routeros .
            git push origin main
            \`\`\`
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['auto-patch-failed', 'merge-conflict']
            });

      - name: Create issue on patch failure
        if: failure() && steps.apply-patches.outputs.success == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'Auto-Patch: Patch Application Failed';
            const failedPatches = `${{ steps.apply-patches.outputs.failed_patches }}`;
            const body = `## Patch Application Failed

            One or more patches failed to apply cleanly.

            **Details:**
            - Upstream commit: \`${{ steps.check-upstream.outputs.upstream_commit }}\`
            - Behind by: ${{ steps.check-upstream.outputs.behind_count }} commits
            - Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            **Failed Patches:**
            ${failedPatches}

            **Possible Causes:**
            - Upstream code has changed in the patched areas
            - Patches need to be regenerated
            - Fields might have been renamed/removed upstream

            **Action Required:**
            1. Check upstream changes in affected files
            2. Manually apply patches or update them
            3. Regenerate patch files if needed
            4. Test build
            5. Update patches in \`.github/patches/\`

            **Regenerate Patches:**
            \`\`\`bash
            # Make manual fixes
            git add -u
            git commit -m "fix: update patches for new upstream"
            git format-patch -1 HEAD -o .github/patches/ --force
            \`\`\`
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['auto-patch-failed', 'patch-conflict']
            });

      - name: Create issue on build failure
        if: failure() && steps.build.outputs.success == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'Auto-Patch: Build Failed';
            const body = `## Build Failed After Patching

            The provider build failed after applying patches.

            **Details:**
            - Upstream commit: \`${{ steps.check-upstream.outputs.upstream_commit }}\`
            - Behind by: ${{ steps.check-upstream.outputs.behind_count }} commits
            - Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            **Possible Causes:**
            - Go compilation errors in patched code
            - Dependency issues
            - API changes in upstream provider

            **Action Required:**
            1. Check workflow logs for build errors
            2. Review patched files for compilation issues
            3. Update patches if needed
            4. Test build locally

            **Local Testing:**
            \`\`\`bash
            go build -o terraform-provider-routeros .
            \`\`\`
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['auto-patch-failed', 'build-error']
            });

      - name: Success summary
        if: success() && steps.check-upstream.outputs.up_to_date == 'false'
        run: |
          echo "Auto-patch workflow completed successfully!"
          echo ""
          echo "Summary:"
          echo "  - Upstream commits merged: ${{ steps.check-upstream.outputs.behind_count }}"
          echo "  - Patches applied: Success"
          echo "  - Build status: Success"
          echo "  - Provider version: ${{ steps.build.outputs.version }}"
          echo "  - Changes pushed to fork: Success"

      - name: No updates summary
        if: success() && steps.check-upstream.outputs.up_to_date == 'true'
        run: |
          echo "Already up to date with upstream"
          echo "No action needed."

  find-tags:
    runs-on: ubuntu-latest
    needs: auto-patch
    if: always()
    outputs:
      tags: ${{ steps.get-tags.outputs.tags }}
      tags_count: ${{ steps.get-tags.outputs.count }}

    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/terraform-routeros/terraform-provider-routeros.git || true
          git fetch upstream --tags

      - name: Find tags to patch
        id: get-tags
        run: |
          echo "Finding upstream tags (last 3 versions)..."
          FORCE_ALL="${{ github.event.inputs.force_all_tags }}"
          echo "Force all tags: $FORCE_ALL"

          # Get last 3 version tags from upstream, sorted by version
          UPSTREAM_TAGS=$(git ls-remote --tags upstream \
            | grep -v '\^{}' \
            | awk '{print $2}' \
            | sed 's|refs/tags/||' \
            | grep '^v[0-9]' \
            | sort -V \
            | tail -3)

          echo "Upstream tags (last 3):"
          echo "$UPSTREAM_TAGS"

          # Filter to only tags that need updating
          TAGS_TO_PATCH=""
          for tag in $UPSTREAM_TAGS; do
            echo "Checking tag: $tag"

            # Get upstream commit for this tag
            UPSTREAM_COMMIT=$(git ls-remote upstream "refs/tags/$tag" | awk '{print $1}')
            echo "  Upstream commit: $UPSTREAM_COMMIT"

            # If force_all_tags is true, skip checking and just add all tags
            if [ "$FORCE_ALL" = "true" ]; then
              echo "  Status: FORCE MODE - will update"
              TAGS_TO_PATCH="$TAGS_TO_PATCH $tag"
              continue
            fi

            # Check if fork has this tag
            FORK_COMMIT=$(git rev-parse "refs/tags/$tag" 2>/dev/null || echo "")

            if [ -z "$FORK_COMMIT" ]; then
              echo "  Fork tag: does not exist - NEEDS PATCHING"
              TAGS_TO_PATCH="$TAGS_TO_PATCH $tag"
            else
              echo "  Fork tag commit: $FORK_COMMIT"

              # Check if fork's main is descendant of upstream tag commit
              # This ensures our patched main includes the upstream tag
              if git merge-base --is-ancestor "$UPSTREAM_COMMIT" HEAD; then
                # Check if our tag points to current main (already patched)
                if [ "$FORK_COMMIT" = "$(git rev-parse HEAD)" ]; then
                  echo "  Status: up to date"
                else
                  echo "  Status: exists but outdated - NEEDS UPDATING"
                  TAGS_TO_PATCH="$TAGS_TO_PATCH $tag"
                fi
              else
                echo "  Status: upstream tag not yet merged to main - SKIP"
              fi
            fi
          done

          # Convert to JSON array
          if [ -z "$TAGS_TO_PATCH" ]; then
            echo "tags=[]" >> $GITHUB_OUTPUT
            echo "count=0" >> $GITHUB_OUTPUT
            echo "No tags need patching"
          else
            TAGS_JSON=$(echo "$TAGS_TO_PATCH" | tr ' ' '\n' | grep -v '^$' | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "tags=$TAGS_JSON" >> $GITHUB_OUTPUT
            TAG_COUNT=$(echo "$TAGS_TO_PATCH" | wc -w | tr -d ' ')
            echo "count=$TAG_COUNT" >> $GITHUB_OUTPUT
            echo "Tags to patch: $TAGS_TO_PATCH"
            echo "Count: $TAG_COUNT"
          fi

      - name: Summary
        run: |
          echo "Tag detection complete"
          echo "Tags to patch: ${{ steps.get-tags.outputs.count }}"

  patch-tags:
    runs-on: ubuntu-latest
    needs: find-tags
    if: needs.find-tags.outputs.tags_count > 0
    strategy:
      matrix:
        tag: ${{ fromJson(needs.find-tags.outputs.tags) }}
      max-parallel: 3
      fail-fast: false

    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/terraform-routeros/terraform-provider-routeros.git || true
          git fetch upstream --tags

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Cache Go dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Create tag from patched main
        id: create-tag
        run: |
          TAG="${{ matrix.tag }}"
          echo "Creating tag: $TAG"

          # Get upstream commit for reference
          UPSTREAM_COMMIT=$(git ls-remote upstream "refs/tags/$TAG" | awk '{print $1}')
          echo "Upstream tag commit: $UPSTREAM_COMMIT"

          # Get current main commit (already patched)
          MAIN_COMMIT=$(git rev-parse HEAD)
          echo "Fork main commit: $MAIN_COMMIT"

          # Verify that main includes the upstream tag
          if ! git merge-base --is-ancestor "$UPSTREAM_COMMIT" HEAD; then
            echo "Error: Upstream tag $TAG is not in fork's main history"
            echo "This should not happen - the auto-patch job should have merged it"
            exit 1
          fi

          # Create annotated tag pointing to current main
          git tag -fa "$TAG" -m "Patched version of upstream $TAG

          Upstream commit: $UPSTREAM_COMMIT
          Fork commit: $MAIN_COMMIT
          Patches applied:
          - Pulumi compatibility fixes (field renaming)
          - Upstream .github files removed

          Auto-generated by GitHub Actions
          Workflow: ${{ github.workflow }}
          Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo "Tag created successfully"
          echo "success=true" >> $GITHUB_OUTPUT

      - name: Test build for tag
        id: build
        run: |
          echo "Building provider for tag ${{ matrix.tag }}..."

          if go build -o terraform-provider-routeros .; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "Build successful"

            VERSION=$(./terraform-provider-routeros version 2>/dev/null || echo "unknown")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Provider version: $VERSION"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "Build failed"
            exit 1
          fi

      - name: Push tag
        if: steps.build.outputs.success == 'true'
        run: |
          TAG="${{ matrix.tag }}"
          echo "Pushing tag $TAG to fork..."

          # Force push the tag (will overwrite if exists)
          git push origin "refs/tags/$TAG" --force

          echo "Tag pushed successfully"

      - name: Create issue on tag failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const tag = '${{ matrix.tag }}';
            const title = `Auto-Patch: Tag ${tag} Failed`;
            const body = `## Tag Patching Failed

            Failed to create/update tag: \`${tag}\`

            **Details:**
            - Tag: ${tag}
            - Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            **Possible Causes:**
            - Build failure for this tag
            - Tag commit not in main history
            - Git push failure

            **Action Required:**
            1. Check workflow logs
            2. Verify main branch includes upstream tag commit
            3. Try manual tag creation:

            \`\`\`bash
            git fetch upstream --tags
            git checkout main
            git tag -fa ${tag} -m "Patched ${tag}"
            git push origin refs/tags/${tag} --force
            \`\`\`
            `;

            // Check if issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['auto-patch-failed', 'tag-failed'],
              state: 'open'
            });

            const existingIssue = existingIssues.data.find(issue =>
              issue.title === title
            );

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['auto-patch-failed', 'tag-failed']
              });
            }

      - name: Success summary
        if: success()
        run: |
          echo "Tag ${{ matrix.tag }} patched successfully!"
          echo "  - Build status: Success"
          echo "  - Provider version: ${{ steps.build.outputs.version }}"
          echo "  - Tag pushed: Success"
